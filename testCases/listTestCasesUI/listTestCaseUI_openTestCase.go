package listTestCasesUI

import (
	sharedCode "FenixTesterGui/common_code"
	"FenixTesterGui/soundEngine"
	"FenixTesterGui/testCase/testCaseModel"
	"errors"
	"fmt"
	"fyne.io/fyne/v2"
)

func openTestCase(testCasesToOpen string, testCasesModel *testCaseModel.TestCasesModelsStruct) {

	var existInMap bool

	// Verify if TestCase exists
	_, existInMap = testCasesModel.TestCases[testCasesToOpen]
	if existInMap == true {

		/*
			// Change to Tab containing TestCaseUuid
			// Send command 'ChannelCommandChangeActiveTestCase' on command-channel
			commandEngineChannelMessage := sharedCode.ChannelCommandStruct{
				ChannelCommand:  sharedCode.ChannelCommandChangeActiveTestCase,
				FirstParameter:  "",
				SecondParameter: "",
				ActiveTestCase:  uuidToOpen,
				ElementType:     sharedCode.BuildingBlock(sharedCode.Undefined),
			}

			// Send command message over channel to Command and Rule Engine
			sharedCode.CommandChannel <- commandEngineChannelMessage
		*/
		// Set active TestCase
		testCasesModel.CurrentActiveTestCaseUuid = testCasesToOpen

		// Change to Tab containing TestCaseUuid
		// Send 'Switch to TestCase-tab' command over channel
		outgoingChannelCommandGraphicsUpdatedData := sharedCode.ChannelCommandGraphicsUpdatedStruct{
			ChannelCommandGraphicsUpdate: sharedCode.ChannelCommandGraphicsUpdatedSelectTestCaseTabBasedOnTestCaseUuid,
			CreateNewTestCaseUI:          false,
			ActiveTestCase:               testCasesToOpen,
			TextualTestCaseSimple:        "",
			TextualTestCaseComplex:       "",
			TextualTestCaseExtended:      "",
			TestInstructionUuid:          "",
		}

		sharedCode.CommandChannelGraphicsUpdate <- outgoingChannelCommandGraphicsUpdatedData

		return
	}

	// Trigger Load the TestCase from Database
	err := testCasesModel.LoadFullTestCaseFromDatabase(testCasesToOpen, sharedCode.CurrentUserAuthenticatedTowardsGCP)

	if err != nil {

		errorId := "b9b31517-04f3-48e8-a05b-82baba4307"
		err = errors.New(fmt.Sprintf("couldn't execute command 'LoadFullTestCaseFromDatabase', {error: %s} [ErrorID: %s]", err, errorId))

		fmt.Println(err) // TODO Send on Error-channel

		return

	}

	// Notify the user that the TestCase was opened

	// Trigger System Notification sound
	soundEngine.PlaySoundChannel <- soundEngine.SystemNotificationSound

	fyne.CurrentApp().SendNotification(&fyne.Notification{
		Title:   "TestCase Open",
		Content: "TestCase was opened and can be found in TestCase editing tab",
	})

	fmt.Println("TestCase was Load from Cloud-DB")

	// Update UI with TestCase Textual Representation
	textualTestCaseSimple, textualTestCaseComplex, textualTestCaseExtended, err := testCasesModel.CreateTextualTestCase(testCasesToOpen)
	if err != nil {
		fmt.Println(err)
	}

	// Send 'update TestCase graphics' command over channel
	outgoingChannelCommandGraphicsUpdatedData := sharedCode.ChannelCommandGraphicsUpdatedStruct{
		ChannelCommandGraphicsUpdate: sharedCode.ChannelCommandGraphicsUpdatedNewTestCase,
		CreateNewTestCaseUI:          true,
		ActiveTestCase:               testCasesToOpen,
		TextualTestCaseSimple:        textualTestCaseSimple,
		TextualTestCaseComplex:       textualTestCaseComplex,
		TextualTestCaseExtended:      textualTestCaseExtended,
	}

	sharedCode.CommandChannelGraphicsUpdate <- outgoingChannelCommandGraphicsUpdatedData

}
