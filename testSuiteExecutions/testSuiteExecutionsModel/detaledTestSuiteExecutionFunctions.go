package testSuiteExecutionsModel

import (
	sharedCode "FenixTesterGui/common_code"
	fenixExecutionServerGuiGrpcApi "github.com/jlambert68/FenixGrpcApi/FenixExecutionServer/fenixExecutionServerGuiGrpcApi/go_grpc_api"
	"github.com/sirupsen/logrus"
	"strconv"
)

// ExtractAndStoreRelationBetweenTestInstructionUuidAndTestSuiteExecutionUuid
// Extract relation between TestInstructionUuid and TestSuiteExecutionUuid
func (testSuiteExecutionsModel TestSuiteExecutionsModelStruct) ExtractAndStoreRelationBetweenTestInstructionUuidAndTestSuiteExecutionUuid(
	detailedTestSuiteExecutionMapKey DetailedTestSuiteExecutionMapKeyType) (
	err error) {

	sharedCode.Logger.WithFields(logrus.Fields{
		"id": "742718f8-9a6a-459c-8fc5-9f3619daad49",
	}).Debug("Incoming - 'ExtractAndStoreRelationBetweenTestInstructionUuidAndTestSuiteExecutionUuid'")

	defer sharedCode.Logger.WithFields(logrus.Fields{
		"id": "efc6085b-6116-4634-b7fd-66219dc1dd46",
	}).Debug("Outgoing - 'ExtractAndStoreRelationBetweenTestInstructionUuidAndTestSuiteExecutionUuid'")

	// Extract the raw detailedTestSuiteExecution-message
	var detailedTestSuiteExecution *fenixExecutionServerGuiGrpcApi.TestSuiteExecutionResponseMessage
	var existInMap bool
	detailedTestSuiteExecution, existInMap = testSuiteExecutionsModel.
		ReadFromDetailedTestSuiteExecutionsMap(detailedTestSuiteExecutionMapKey)

	// Lock Map for Writing
	detailedTestSuiteExecutionsMapMutex.Lock()

	//UnLock Map
	defer detailedTestSuiteExecutionsMapMutex.Unlock()

	if existInMap == false {

		return err
	}

	// Extract map with DetailedTestSuiteExecutionsMapObjects
	var detailedTestSuiteExecutionsObjectsMapPtr *map[DetailedTestSuiteExecutionMapKeyType]*DetailedTestSuiteExecutionsMapObjectStruct
	var detailedTestSuiteExecutionsObjectsMap map[DetailedTestSuiteExecutionMapKeyType]*DetailedTestSuiteExecutionsMapObjectStruct

	detailedTestSuiteExecutionsObjectsMapPtr = testSuiteExecutionsModel.DetailedTestSuiteExecutionsObjectsMapPtr
	detailedTestSuiteExecutionsObjectsMap = *detailedTestSuiteExecutionsObjectsMapPtr

	// Extract specificDetailedTestSuiteExecutionsMapObject
	var detailedTestSuiteExecutionsMapObjectPtr *DetailedTestSuiteExecutionsMapObjectStruct
	detailedTestSuiteExecutionsMapObjectPtr, existInMap = detailedTestSuiteExecutionsObjectsMap[detailedTestSuiteExecutionMapKey]

	if existInMap == false {
		return err
	}

	// Always reInitialized RelationBetweenTestInstructionUuidAndTestInstructionExecutionUuidMapPtr
	var tempRelationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap map[RelationBetweenTestInstructionUuidAndTestInstructionExectuionMapKeyType]TestInstructionExecutionUuidType
	tempRelationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap = make(map[RelationBetweenTestInstructionUuidAndTestInstructionExectuionMapKeyType]TestInstructionExecutionUuidType)

	detailedTestSuiteExecutionsMapObjectPtr.RelationBetweenTestInstructionUuidAndTestInstructionExecutionUuidMapPtr = &tempRelationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap

	// Always reInitialized RelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMapPtr
	var tempRelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMap map[TestInstructionExecutionUuidType]RelationBetweenTestInstructionUuidAndTestInstructionExecutionStruct
	tempRelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMap = make(map[TestInstructionExecutionUuidType]RelationBetweenTestInstructionUuidAndTestInstructionExecutionStruct)

	detailedTestSuiteExecutionsMapObjectPtr.RelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMapPtr = &tempRelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMap

	/*
		// Get the RelationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap
		var relationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMapPtr *map[RelationBetweenTestInstructionUuidAndTestInstructionExectuionMapKeyType]TestInstructionExecutionUuidType
		var relationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap map[RelationBetweenTestInstructionUuidAndTestInstructionExectuionMapKeyType]TestInstructionExecutionUuidType
		relationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMapPtr = detailedTestSuiteExecutionsMapObject.RelationBetweenTestInstructionUuidAndTestInstructionExecutionUuidMapPtr
		relationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap = *relationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMapPtr


	*/

	// Loop all TestCaseExecutions to get all TestInstructionExecutions
	for _, testCaseExecution := range detailedTestSuiteExecution.TestCaseExecutions {

		// Loop all TestInstructionExecutions and extract relation between TestInstruction and TestInstructionExecution
		for _, testInstructionExecution := range testCaseExecution.TestInstructionExecutions {

			// Generate the relationBetweenTestInstructionUuidAndTestInstructionExectuionMapKey
			var relationBetweenTestInstructionUuidAndTestInstructionExectuionMapKey RelationBetweenTestInstructionUuidAndTestInstructionExectuionMapKeyType
			relationBetweenTestInstructionUuidAndTestInstructionExectuionMapKey = RelationBetweenTestInstructionUuidAndTestInstructionExectuionMapKeyType(
				testInstructionExecution.GetTestInstructionExecutionBasicInformation().TestInstructionUuid)
			var testInstructionExecutionUuid TestInstructionExecutionUuidType
			testInstructionExecutionUuid = TestInstructionExecutionUuidType(testInstructionExecution.GetTestInstructionExecutionBasicInformation().TestInstructionExecutionUuid +
				strconv.Itoa(int(testInstructionExecution.GetTestInstructionExecutionBasicInformation().GetTestInstructionExecutionVersion())))

			tempRelationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap[relationBetweenTestInstructionUuidAndTestInstructionExectuionMapKey] = testInstructionExecutionUuid

			tempRelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMap[testInstructionExecutionUuid] = RelationBetweenTestInstructionUuidAndTestInstructionExecutionStruct{
				TestInstructionUuid: relationBetweenTestInstructionUuidAndTestInstructionExectuionMapKey,
				TestInstructionName: testInstructionExecution.GetTestInstructionExecutionBasicInformation().TestInstructionName +
					" [" + string(relationBetweenTestInstructionUuidAndTestInstructionExectuionMapKey[:7]) + "]"}
		}
	}

	detailedTestSuiteExecutionsMapObjectPtr.RelationBetweenTestInstructionUuidAndTestInstructionExecutionUuidMapPtr = &tempRelationBetweenTestInstructionUuidAndTestInstructionExectuionUuidMap
	detailedTestSuiteExecutionsMapObjectPtr.RelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMapPtr = &tempRelationBetweenTestInstructionExecutionUuidAndTestInstructionUuidMap

	return err
}
