package listTestSuitesUI

import (
	"FenixTesterGui/testCase/testCaseModel"
)

func (listTestSuiteUIObject *ListTestSuiteUIStruct) openTestSuite(testSuitesToOpen string, testCasesModel *testCaseModel.TestCasesModelsStruct) {

	/*
		var existInMap bool

		// Get TestCasesMap
		var testCasesMap map[string]*testCaseModel.TestCaseModelStruct
		testCasesMap = *testCasesModel.TestCasesMapPtr

		// Verify if TestCase exists
		_, existInMap = testCasesMap[testSuitesToOpen]
		if existInMap == true {

			// Set active TestCase
			testCasesModel.CurrentActiveTestCaseUuid = testSuitesToOpen

			// Change to Tab containing TestCaseUuid
			// Send 'Switch to TestCase-tab' command over channel
			outgoingChannelCommandGraphicsUpdatedData := sharedCode.ChannelCommandGraphicsUpdatedStruct{
				ChannelCommandGraphicsUpdate: sharedCode.ChannelCommandGraphicsUpdatedSelectTestCaseTabBasedOnTestCaseUuid,
				CreateNewTestCaseUI:          false,
				ActiveTestCase:               testSuitesToOpen,
				TextualTestCaseSimple:        "",
				TextualTestCaseComplex:       "",
				TextualTestCaseExtended:      "",
				TestInstructionUuid:          "",
			}

			sharedCode.CommandChannelGraphicsUpdate <- outgoingChannelCommandGraphicsUpdatedData

			return
		}

		// Trigger Load the TestCase from Database
		err := testCasesModel.LoadFullTestCaseFromDatabase(testSuitesToOpen)

		if err != nil {

			errorId := "f8696838-3b94-46fd-8b6c-97758e674e39"
			err = errors.New(fmt.Sprintf("couldn't execute command 'LoadFullTestCaseFromDatabase', {error: %s} [ErrorID: %s]", err, errorId))

			fmt.Println(err) // TODO Send on Error-channel

			return

		}

		// Notify the user that the TestCase was opened

		// Trigger System Notification sound
		soundEngine.PlaySoundChannel <- soundEngine.SystemNotificationSound

		fyne.CurrentApp().SendNotification(&fyne.Notification{
			Title:   "TestCase Open",
			Content: "TestCase was opened and can be found in TestCase editing tab",
		})

		fmt.Println("TestCase was Load from Cloud-DB")

		// Update UI with TestCase Textual Representation
		textualTestCaseSimple, textualTestCaseComplex, textualTestCaseExtended, err := testCasesModel.CreateTextualTestCase(testSuitesToOpen)
		if err != nil {
			fmt.Println(err)
		}

		// Send 'update TestCase graphics' command over channel
		outgoingChannelCommandGraphicsUpdatedData := sharedCode.ChannelCommandGraphicsUpdatedStruct{
			ChannelCommandGraphicsUpdate: sharedCode.ChannelCommandGraphicsUpdatedNewTestCase,
			CreateNewTestCaseUI:          true,
			ActiveTestCase:               testSuitesToOpen,
			TextualTestCaseSimple:        textualTestCaseSimple,
			TextualTestCaseComplex:       textualTestCaseComplex,
			TextualTestCaseExtended:      textualTestCaseExtended,
		}

		sharedCode.CommandChannelGraphicsUpdate <- outgoingChannelCommandGraphicsUpdatedData


	*/

}
